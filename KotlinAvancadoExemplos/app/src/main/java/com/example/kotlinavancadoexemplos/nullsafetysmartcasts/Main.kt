package com.example.kotlinavancadoexemplos.nullsafetysmartcasts

// Nosso modelo de usu√°rio
data class Usuario(val nome: String?, val idade: Int?)

// Fun√ß√£o que imprime dados do usu√°rio, usando null safety e smart casts
fun imprimirUsuario(usuario: Usuario?) {
    // Safe call + Elvis: evita null pointer
    val nomeFormatado = usuario?.nome ?: "Nome n√£o informado"
    val idadeFormatada = usuario?.idade ?: 0

    println("üë§ Nome: $nomeFormatado")
    println("üéÇ Idade: $idadeFormatada anos")

    // Smart cast com "is"
    if (usuario != null) {
        // Aqui o Kotlin sabe que "usuario" n√£o √© mais null
        println("Usu√°rio v√°lido, processando informa√ß√µes...")
    } else {
        println("Usu√°rio √© nulo!")
    }
}

// Fun√ß√£o que retorna tamanho do nome, usando not-null assertion (!!)
fun tamanhoDoNome(usuario: Usuario?): Int {
    // !! = for√ßa o compilador a assumir que n√£o √© null
    // ATEN√á√ÉO: se for null, estoura NullPointerException
    return usuario!!.nome!!.length
}

fun main() {
    val usuario1 = Usuario("Ana", 25)
    val usuario2 = Usuario(null, null)
    val usuario3: Usuario? = null

    println("=== Exemplo 1 ===")
    imprimirUsuario(usuario1)

    println("\n=== Exemplo 2 ===")
    imprimirUsuario(usuario2)

    println("\n=== Exemplo 3 ===")
    imprimirUsuario(usuario3)

    println("\n=== Usando !! ===")
    try {
        println("Tamanho do nome: ${tamanhoDoNome(usuario1)}")
        println("Tamanho do nome: ${tamanhoDoNome(usuario2)}") // Vai dar erro!
    } catch (e: NullPointerException) {
        println("‚ö† Erro: Tentou acessar algo nulo usando !!")
    }
}
